import React from "react";
import Head from "next/head";
import Navbar from "../../../components/navbar";
import Hero from "../../../components/hero";
import { client, urlFor } from "../../../client";
import Projectcard from "../../../components/atoms/projectcard";
import IsotopeReact from "../../../components/isotopereact";

export default function Projects({
  casestudies,
  page,
  propertytype,
  spacetype,
  locationstype,
}) {
  // console.log(`casestudies`, casestudies);
  // console.log(`propertytype`, propertytype);
  // console.log(`spacetype`, spacetype);
  //console.log(`locationstype`, locationstype);
  //console.log(`page`, page);

  return (
    <div>
      <Head>
        <title>Freemodel</title>
        {/* <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/ENicon.svg" /> */}
      </Head>

      <Navbar />
      <main>
        <Hero hero={{ title: page.title }} />

        {/* Highlight studies */}
        <div className="flex flex-col items-center py-20 bg-FM-blue">
          <h2 className="text-4xl font-bold text-center text-white">
            {page.highlighttitle}
          </h2>
          <div className="flex flex-col lg:flex-row gap-8 justify-center items-center mt-10">
            {page.projecthighlight.map((item) => (
              <Projectcard
                key={Math.random() * 100000000000000}
                title={item.title}
                slug={item.slug.current}
                image={urlFor(item.mainImage.asset.url).url()}
                beds={item.beds}
                baths={item.baths}
                duration={item.durationmonths}
              />
            ))}
          </div>
        </div>
        <div className="flex flex-col items-center my-28">
          <h2 className="text-4xl font-bold ">Customize your search</h2>
        </div>

        <IsotopeReact
          casestudies={casestudies}
          propertytype={propertytype}
          spacetype={spacetype}
          locationstype={locationstype}
        />
      </main>
    </div>
  );
}

export const getStaticProps = async () => {
  const pagequery = `*[_type == "projects"][0] {
    _id,
    title,
    mainImage,
    highlighttitle,
    projecthighlight []->{
      _id,
      title,
      slug {
          current
      },
      mainImage {
          asset->{
              _ref,
              _type,
              altText,
              description,
              "tags": opt.media.tags[]->name.current,
              title,
              url
          }
        },
        beds,
        baths,
        durationmonths,
  },
    }
  `;

  const query = ` *[_type == "caseStudy"] {
      _id,
      title,
      mainImage {
        asset->{
          _ref,
          _type,
          altText,
          description,
          "tags": opt.media.tags[]->name.current,
          title,
          url
        }
      },
      slug {
        current
      },
      beds,
      baths,
      durationmonths,
      spacetype->{
        _id,
        name,
        mainImage,
        slug {
          current
        }
      },
      
        "location": *[_id == ^.cities._ref][0],
        

      hometype->{
        _id,
        name,
        mainImage,
        slug {
          current
        }
      },
      }`;

  const housequery = `*[_type == "houseType"] {
    _id,
    name,
    mainImage,
    slug {
      current
    }
    }`;

  const spacequery = `*[_type == "spaceType"] {
        _id,
        name,
        mainImage,
        slug {
          current
        }
        }`;

  const citiestypes = `*[_type == "cities"] {
          _id,
          name,
          image,
          state,
          "location": *[_id == ^.state._ref][0],
          slug {
            current
          }
          }`;

  const casestudies = await client.fetch(query);
  const page = await client.fetch(pagequery);
  //Filter by property type
  const propertytype = await client.fetch(housequery);
  const spacetype = await client.fetch(spacequery);
  const locationstype = await client.fetch(citiestypes);

  return {
    props: {
      casestudies,
      page,
      propertytype,
      spacetype,
      locationstype,
    },

    revalidate: 10,
  };
};
